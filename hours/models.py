import datetime

from django.db import models
from django.contrib.auth.models import User

HOURS_CHOICES = zip(range(0,24), range(0,24))
MINUTES_CHOICES = zip(range(0,60,5), range(0,60,5))

class Commitment(models.Model):
    """A relationship between a volunteer and an organisation.
    Commitments are used to determine the "active volunteer list" of an organisation
    and are the basis of volunteers' volunteering CVs"""
    volunteer = models.ForeignKey(User)
    organisation = models.ForeignKey('positions.Organisation')
    position = models.ForeignKey('positions.Position', null=True, blank=True, help_text="An optional field that indicates which position the volunteer made the commitment for")
    created = models.DateTimeField(auto_now_add=True, help_text="Automatically populated when the commitment is generated by volunteer acceptance")
    started = models.DateTimeField(null=True, blank=True, help_text="This is set by the organisation if the volunteer passes the interview")
    finished = models.DateTimeField(null=True, blank=True, help_text="This is set by the organisation when the volunteer stops working for the organisation")
    
    def status(self):
        now = datetime.datetime.now()
        if self.finished and (self.finished < now):
            return "Finished"
        elif self.started < now:
            return "Active"
        else:
            return "Not active yet"

    def __unicode__(self):
        return "Commitment %d" % self.id
    
class TimeRecord(models.Model):
    """A record of time spent working for an organisation."""
    created = models.DateTimeField(auto_now_add=True, help_text="The time the record was created.")
    volunteer = models.ForeignKey(User)
    date_worked = models.DateField(help_text="The date the work was done on")
    hours = models.IntegerField(choices=HOURS_CHOICES ,help_text="The number of hours worked", default=1)
    minutes = models.IntegerField(choices=MINUTES_CHOICES, help_text="The number of minutes worked, in 5 minute increments", default=0)
    organisation = models.ForeignKey('positions.Organisation', null=True, blank=True, help_text="The organisation, if registered with the system - should be approved by the organisation")
    manual_organisation = models.CharField(max_length=63, null=True, blank=True, help_text="The organisation, if not registered with the system - should be approved by volunteering staff")
    description = models.TextField(null=True, blank=True, help_text="An optional description of work done.")
    reviewed = models.DateTimeField(null=True, blank=True, help_text="The time that the record was reviewed by the organisation or volunteering staff.")
    reviewed_by = models.ForeignKey(User, related_name='review_set', null=True, blank=True)
    confirmed = models.BooleanField(default=False)
    
    def organisation_name(self):
        if self.organisation:
            return self.organisation.name
        else:
            return self.manual_organisation
            
    class Meta:
        ordering = ['-date_worked']

class Endorsement(models.Model):
    """An endorsement from an organisation rep to a volunteer"""
    created = models.DateTimeField(auto_now_add=True, help_text="The time the record was created.")
    commitment = models.ForeignKey(Commitment, unique=True)
    representative = models.ForeignKey(User, related_name='representative')
    endorsement_text = models.TextField()
